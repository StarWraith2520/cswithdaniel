Credit: Ryan Wu

1.
System.out.println("abcdefg".length()); //7
System.out.println("abcdabcd".indexOf("bcd")); //1
System.out.println("abcdabcd".indexOf("cde")); //-1
System.out.println("abcdefg".charAt(3)); //d
//"abcdefg".charAt(7); //Error
//"abcdefg".charAt(-1); //Error

System.out.println("abcdefg".substring(3)); //defg
System.out.println("abcdefg".substring(7)); //" "
//"abcdefg".substring(8); //Error
//"abcdefg".substring(-1); //Error
System.out.println("abcdefg".substring(4, 6)); //ef
System.out.println("abcdefg".substring(3, 7)); //defg
System.out.println("abcdefg".substring(2, 2)); //" "
//"abcdefg".substring(4, 8); //Error
//"abcdefg".substring(5, 4); //Error

Output:
7
1
-1
d
defg
 
ef
defg
 


2.
System.out.println((Math.sqrt(10) - 3) * (4 + 7) / Math.pow(4, 2));
System.out.println(Math.pow(Math.E, -1 * Math.pow(5.5 - 3.2, 2)));
System.out.println(Math.abs(2 - 5) / Math.PI);


3.
System.out.println((int) (Math.random() * 5));
System.out.println((int) (Math.random() * 4) + 3);
System.out.println(2 * ((int) (Math.random() * 6) + 3) + 1);


4.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        boolean[] board = new boolean[10];
        int pointer = 0;
        while (!boardFull(board))
        {
            int roll = (int) (Math.random() * 6 + 1);
            pointer += roll;
            pointer %= 10;
            System.out.println("You rolled a " + roll + " and moved to square " + pointer);
            board[pointer] = true;
        }
    }
    public static boolean boardFull(boolean[] board)
    {
        for (int i = 0; i < board.length; i++)
        {
            if (!board[i])
            {
                return false;
            }
        }
        return true;
    }
}
