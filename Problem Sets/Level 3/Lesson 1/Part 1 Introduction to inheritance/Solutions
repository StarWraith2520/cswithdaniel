Credit: Ryan Wu

1. Determine whether the following statements are true or false:
  a. A subclass inherits all variables and methods from its superclass.
    True
  b. A subclass inherits all constructors from its superclass.
    False
  c. The super() call to the superclass constructor may be omitted if the superclass has only one constructor.
    False
  d. There can be two super() calls in a constructor.
    False
  e. Creating a method with the same name and parameter types as a superclass method is allowed.
    True
  f. Creating a method with the same name and parameter types as a superclass but with different return types is allowed.
    False
  g. A subclass can directly call methods of its superclass.
    True
  h. A relation where X extends Y, Y extends Z, and Z extends X is allowed.
    False
  i. Country extends City is a valid inheritance relation.
    False
  j. City extends Country is a valid inheritance relation.
    False
  k. Apple extends Fruit is a valid inheritance relation.
    True
  l. Grass extends Green is a valid inheritance relation.
    False
    

2.
class Oval
{
   double radius1, radius2;
   public Oval(double r1, double r2)
   {
      radius1 = r1;
      radius2 = r2;
   }
   public double area()
   {
      return Math.PI * radius1 * radius2;
   }
}
class Circle extends Oval
{
   public Circle(double r1)
   {
      super(r1, r1);
   }
   public double circumference()
   {
      return Math.PI * 2 * radius1;
   }
}

Testing:
Circle c1 = new Circle(5);
System.out.println(c1.area());
System.out.println(c1.circumference());


3.
class Point
{
   double x, y;
   public Point(double x1, double y1)
   {
      x = x1;
      y = y1;
   }
   public String toString()
   {
      return "(" + x + ", " + y + ")";
   }
}
class Polygon
{
   Point[] pArr;
   public Polygon(Point[] p1)
   {
      pArr = new Point[p1.length];
      for (int i = 0; i < p1.length; i++)
      {
         pArr[i] = p1[i];
      }
   }
   public void set(int idx, double x1, double y1)
   {
      if (idx >= 0 && idx < pArr.length)
      {
         pArr[idx].x = x1;
         pArr[idx].y = y1;
      }
      else
      {
         System.out.println("Your index doesn't exist");
      }
   }
   public Point get(int idx)
   {
      if (idx >= 0 && idx < pArr.length)
      {
         return pArr[idx];
      }
      else
      {
         System.out.println("Your index doesn't exist");
         return null;
      }
   }
   public void display()
   {
      for(Point p: pArr)
      {
         System.out.println(p);
      }
   }
}
class Rectangle extends Polygon
{
   public Rectangle(Point p, double l, double w)
   {
      super(new Point[] {p, new Point(p.x, p.y + w), new Point(p.x + l, p.y), new Point(p.x + l, p.y + w)});
   }
   public Rectangle(double l, double w)
   {
      this(new Point(0, 0), l, w);
   }
}

Testing:
Rectangle r1 = new Rectangle(5, 7);
r1.display();
