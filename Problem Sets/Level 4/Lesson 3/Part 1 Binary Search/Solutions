Credit: Ryan Wu

1. Sequential search can always be performed on an array.


2. For each of the following arrays, determine whether binary search can be performed.
  a. {2, 3, 7, 5, 4, 9} - No
  b. {3, 6, 9, 12, 15, 18} - Yes
  c. {1, 3, 4, 6, 7, 10, 11, 11, 12, 14} - Yes
  d. {9, 7, 5, 3, 1} - Yes
  e. {-1, -2, -4, -5, -3} - No
  f. {-1, -2, -3, -3, -4, -5} - Yes
  
Note:
Binary search must be performed on a sorted array.
Binary searching through a decreasing array is slightly different from binary searching through an increasing array.


3.
public static int stringIndex(ArrayList<String> list, String s)
{
  for (int i = 0; i < list.size(); i++)
  {
     if (list.get(i).equals(s))
     {
        return i;
     }
  }
  return -1;
}


4. (Only part b is shown since part a is a simpler version of part b)
public static int doubleIndex(double[] arr, double d)
{
  int low = 0;
  int high = arr.length - 1;
  while (low < high)
  {
     int middle = (low + high) / 2;
     if (d > arr[middle]) {low = middle + 1;}
     else if (d < arr[middle]) {high = middle - 1;}
     else {return middle;}
  }

  if (arr[low] == d) {return low;}
  else {return -1;}
}


5. (Only part b is shown since part a is a simpler version fo part b)
public static int recursiveDoubleIndex(double[] arr, double d)
{
  return recursiveDoubleIndex(arr, d, 0, arr.length - 1);
}

public static int recursiveDoubleIndex(double[] arr, double d, int low, int high)
{
  int middle = (low + high) / 2;
  if (d > arr[middle]) {return recursiveDoubleIndex(arr, d, middle + 1, high);}
  else if (d < arr[middle]) {return recursiveDoubleIndex(arr, d, low, middle - 1);}
  return middle;
}

6.
  a. What is the advantage of using binary search?
    Binary search is significantly faster than sequential search.
  b. When should you use sequential search instead of binary search?
    When the array is not sorted or when running time doesn't matter
