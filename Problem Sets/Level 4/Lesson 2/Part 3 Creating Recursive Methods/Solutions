Credit: Ryan Wu

1.
//Base Case: if n = 1 or 2, print "1" once
//Recursive Step: F(n) = F(n - 1) and F(n - 2) together

public static void printFibTimes(int n)
{
  if(n == 1 || n == 2) {System.out.println("1"); return;}
  printFibTimes(n - 1);
  printFibTimes(n - 2);
}


2.
public static int c(int n, int k)
{
  if(k == 0) {return 1;}
  if(n < k) {return 0;}
  return c(n - 1, k - 1) + c(n - 1, k);
}


3.
//Base Case: if n == 1, return an ArrayList containing "0", "1", and "2"
//Recursive Step:
//ternary(1) = 0, 1, 2
//ternary(2) = 00, 01, 02, 10, 11, 12, 20, 21, 22

public static ArrayList<String> ternary(int n)
{
  ArrayList<String> result = new ArrayList<String>();
  if (n == 1) {result.add("0"); result.add("1"); result.add("2"); return result;}

  for (int i = 0; i < ternary(n - 1).size(); i++)
  {
     result.add("0" + ternary(n - 1).get(i));
     result.add("1" + ternary(n - 1).get(i));
     result.add("2" + ternary(n - 1).get(i));
  }
  return result;
}
