Credit: Ryan Wu

1.
public class Main
{
    public static void main(String[] args)
    {
        p1(3);
    }
    public static void p1(int n)
    {
        if (n < 0) {return;}
        System.out.println(n);
        p1(n - 1);
        System.out.println(n);
        p1(n - 2);
    }
}

Output:
3
2
1
0
0
1
2
0
0
3
1
0
0
1

Notes:
p1(3) -> print 3, p1(2), print 3, p1(1)
p1(2) -> print 2, p1(1), print 2, p1(0)
p1(1) -> print 1, p1(0), print 1
p1(0) -> print 0, print 0

p1(3) -> print 3, print 2, print 1, print 0, print 0, print 1, print 2, print 0, print 0, print 3, print 1, print 0, print 0, print 1
p1(2) -> print 2, print 1, print 0, print 0, print 1, print 2, print 0, print 0
p1(1) -> print 1, print 0, print 0, print 1
p1(0) -> print 0, print 0


2.
public class Main
{
    public static void main(String[] args)
    {
        p2(3);
    }
    public static void p2(int n)
    {
        p2(n - 1);
        if (n < 0) {return;}
        System.out.println(n);
    }
}

Output:
Exception in thread "main" java.lang.StackOverflowError
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
	at Main.p2(Main.java:9)
  ...

Notes:
Just answering "error" for this question is okay.
p2(n - 1); is before the base case, which means the base case will never be reached.


3.
public class Main
{
    public static void main(String[] args)
    {
        System.out.println(recursiveMethod(2, 3));
    }
    public static int recursiveMethod(int m, int n)
    {
        if (m == 0 || n == 0) {return 1;}
        return Math.max(recursiveMethod(m, n - 1), recursiveMethod(n, m - 1)) + 1;
    }
}

Output:
5

Notes:
rM(2, 3) -> max(rM(2, 2), rM(3, 1)) + 1 = max(4, 4) + 1 = 5

rM(3, 1) -> max(rM(3, 0), rM(1, 2)) + 1 = max(1, 3) + 1 = 4
rM(2, 2) -> max(rM(2, 1), rM(2, 1)) + 1 = max(3, 3) + 1 = 4
rM(2, 1) -> max(rM(2, 0), rM(1, 1)) + 1 = max(1, 2) + 1 = 3
rM(1, 2) -> max(rM(1, 1), rM(2, 0)) + 1 = max(2, 1) + 1 = 3
rM(1, 1) -> max(rM(1, 0), rM(0, 1)) + 1 = 2


4.
public class MyClass
{
    public static void main(String[] args)
    {
        x(3);
    }
    public static void x(int n)
    {
        for (int i = 0; i < n; i++)
        {
            y(i);
        }
        System.out.println(n);
    }
    public static void y(int n)
    {
        System.out.println(n);
        x(n - 1);
    }
}

Output:
0
-1
1
0
2
0
-1
1
3
